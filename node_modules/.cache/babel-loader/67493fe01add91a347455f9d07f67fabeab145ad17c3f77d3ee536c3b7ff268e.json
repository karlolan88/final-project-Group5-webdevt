{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Karl Andrew Olan\\\\Downloads\\\\final-project-5-webdevt-first-branch\\\\final-project-5-webdevt-first-branch\\\\src\\\\components\\\\ShowtimeManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShowtimeManagement = ({\n  movies,\n  showtimes,\n  setShowtimes\n}) => {\n  _s();\n  const [newShowtime, setNewShowtime] = useState({\n    movieId: \"\",\n    date: \"\",\n    time: \"\",\n    availableSeats: \"\"\n  });\n  const handleAddShowtime = () => {\n    if (!newShowtime.movieId) {\n      alert(\"Please select a movie.\");\n      return;\n    }\n    // Ensure `movieId` is stored as the same type as `id` in movies (e.g., string).\n    const formattedShowtime = {\n      ...newShowtime,\n      movieId: newShowtime.movieId.toString(),\n      id: Date.now()\n    };\n    setShowtimes([...showtimes, formattedShowtime]);\n    setNewShowtime({\n      movieId: \"\",\n      date: \"\",\n      time: \"\",\n      availableSeats: \"\"\n    }); // Reset form\n  };\n  const handleDeleteShowtime = id => {\n    setShowtimes(showtimes.filter(showtime => showtime.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Showtime Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: newShowtime.movieId,\n        onChange: e => setNewShowtime({\n          ...newShowtime,\n          movieId: e.target.value\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Movie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), movies.map(movie => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: movie.id,\n          children: movie.title\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: newShowtime.date,\n        onChange: e => setNewShowtime({\n          ...newShowtime,\n          date: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: newShowtime.time,\n        onChange: e => setNewShowtime({\n          ...newShowtime,\n          time: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Available Seats\",\n        value: newShowtime.availableSeats,\n        onChange: e => setNewShowtime({\n          ...newShowtime,\n          availableSeats: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddShowtime,\n        children: \"Add Showtime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: showtimes.map(showtime => {\n        const movie = movies.find(movie => movie.id.toString() === showtime.movieId);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [movie ? movie.title : \"Unknown Movie\", \" - \", showtime.date, \" \", showtime.time, \"(\", showtime.availableSeats, \" seats available)\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteShowtime(showtime.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, showtime.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowtimeManagement, \"oU249QzT2R6CvL/iVXX1L47dn9w=\");\n_c = ShowtimeManagement;\nexport default ShowtimeManagement;\nvar _c;\n$RefreshReg$(_c, \"ShowtimeManagement\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ShowtimeManagement","movies","showtimes","setShowtimes","_s","newShowtime","setNewShowtime","movieId","date","time","availableSeats","handleAddShowtime","alert","formattedShowtime","toString","id","Date","now","handleDeleteShowtime","filter","showtime","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","movie","title","type","placeholder","onClick","find","_c","$RefreshReg$"],"sources":["C:/Users/Karl Andrew Olan/Downloads/final-project-5-webdevt-first-branch/final-project-5-webdevt-first-branch/src/components/ShowtimeManagement.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst ShowtimeManagement = ({ movies, showtimes, setShowtimes }) => {\r\n  const [newShowtime, setNewShowtime] = useState({\r\n    movieId: \"\",\r\n    date: \"\",\r\n    time: \"\",\r\n    availableSeats: \"\",\r\n  });\r\n\r\n  const handleAddShowtime = () => {\r\n    if (!newShowtime.movieId) {\r\n      alert(\"Please select a movie.\");\r\n      return;\r\n    }\r\n    // Ensure `movieId` is stored as the same type as `id` in movies (e.g., string).\r\n    const formattedShowtime = {\r\n      ...newShowtime,\r\n      movieId: newShowtime.movieId.toString(),\r\n      id: Date.now(),\r\n    };\r\n    setShowtimes([...showtimes, formattedShowtime]);\r\n    setNewShowtime({ movieId: \"\", date: \"\", time: \"\", availableSeats: \"\" }); // Reset form\r\n  };\r\n\r\n  const handleDeleteShowtime = (id) => {\r\n    setShowtimes(showtimes.filter((showtime) => showtime.id !== id));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Showtime Management</h2>\r\n      <div>\r\n        {/* Dropdown for selecting a movie */}\r\n        <select\r\n          value={newShowtime.movieId}\r\n          onChange={(e) => setNewShowtime({ ...newShowtime, movieId: e.target.value })}\r\n        >\r\n          <option value=\"\">Select Movie</option>\r\n          {movies.map((movie) => (\r\n            <option key={movie.id} value={movie.id}>\r\n              {movie.title}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        {/* Inputs for date, time, and available seats */}\r\n        <input\r\n          type=\"date\"\r\n          value={newShowtime.date}\r\n          onChange={(e) => setNewShowtime({ ...newShowtime, date: e.target.value })}\r\n        />\r\n        <input\r\n          type=\"time\"\r\n          value={newShowtime.time}\r\n          onChange={(e) => setNewShowtime({ ...newShowtime, time: e.target.value })}\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Available Seats\"\r\n          value={newShowtime.availableSeats}\r\n          onChange={(e) => setNewShowtime({ ...newShowtime, availableSeats: e.target.value })}\r\n        />\r\n        <button onClick={handleAddShowtime}>Add Showtime</button>\r\n      </div>\r\n\r\n      {/* Display the list of showtimes */}\r\n      <ul>\r\n        {showtimes.map((showtime) => {\r\n          const movie = movies.find((movie) => movie.id.toString() === showtime.movieId);\r\n          return (\r\n            <li key={showtime.id}>\r\n              {movie ? movie.title : \"Unknown Movie\"} - {showtime.date} {showtime.time} \r\n              ({showtime.availableSeats} seats available)\r\n              <button onClick={() => handleDeleteShowtime(showtime.id)}>Delete</button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowtimeManagement;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}